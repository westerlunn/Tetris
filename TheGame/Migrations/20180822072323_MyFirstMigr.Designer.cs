// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheGame;

namespace TheGame.Migrations
{
    [DbContext(typeof(GameContext))]
    [Migration("20180822072323_MyFirstMigr")]
    partial class MyFirstMigr
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TheGame.Block", b =>
                {
                    b.Property<int>("BlockId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Color");

                    b.Property<int?>("GameStateId");

                    b.Property<bool>("IsFilled");

                    b.Property<int>("XPosition");

                    b.Property<int>("YPosition");

                    b.HasKey("BlockId");

                    b.HasIndex("GameStateId");

                    b.ToTable("Block");
                });

            modelBuilder.Entity("TheGame.GameState", b =>
                {
                    b.Property<int>("GameStateId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActiveShapeShapeId");

                    b.Property<int?>("PlayerId");

                    b.Property<long>("Score");

                    b.Property<DateTime>("Time");

                    b.HasKey("GameStateId");

                    b.HasIndex("ActiveShapeShapeId");

                    b.HasIndex("PlayerId");

                    b.ToTable("GameStates");
                });

            modelBuilder.Entity("TheGame.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Highscore");

                    b.Property<long>("Score");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("TheGame.Shape", b =>
                {
                    b.Property<int>("ShapeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ShapeType");

                    b.Property<int>("XPosition");

                    b.Property<int>("YPosition");

                    b.HasKey("ShapeId");

                    b.ToTable("Shapes");

                    b.HasDiscriminator<int>("ShapeType");
                });

            modelBuilder.Entity("TheGame.ShapeI", b =>
                {
                    b.HasBaseType("TheGame.Shape");

                    b.Property<int>("Rotation");

                    b.ToTable("ShapeI");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("TheGame.ShapeJ", b =>
                {
                    b.HasBaseType("TheGame.Shape");

                    b.Property<int>("Rotation")
                        .HasColumnName("ShapeJ_Rotation");

                    b.ToTable("ShapeJ");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("TheGame.ShapeO", b =>
                {
                    b.HasBaseType("TheGame.Shape");


                    b.ToTable("ShapeO");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("TheGame.Block", b =>
                {
                    b.HasOne("TheGame.GameState", "GameState")
                        .WithMany("DeadBlocks")
                        .HasForeignKey("GameStateId");
                });

            modelBuilder.Entity("TheGame.GameState", b =>
                {
                    b.HasOne("TheGame.Shape", "ActiveShape")
                        .WithMany()
                        .HasForeignKey("ActiveShapeShapeId");

                    b.HasOne("TheGame.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");
                });
#pragma warning restore 612, 618
        }
    }
}
